# Port number of javaBE server
server.port: 8081

# Location service URL, internal microservice message, no ssl needed
scheme: "http://"
cityHost: "localhost:"
weatherHost: "localhost:"
cityPath: "/city?name="
#cityUrl: "http://localhost:8082/city?name="
cityPort: 8082

# Conditions service URL,  internal microservice message, no ssl needed
#weatherUrl: "http://localhost:8083/conditions"
weatherPath: "/conditions"
weatherPort: 8083

# Set up KAFKA stream for conditions. Biding name is functionname -in- index
spring.cloud.stream:
  defaultBinder: kafka
  default.contentType: application/json
  bindings:
    conditions-out-0:
      destination: conditions
      group: conditionsGroup

# Connectivity data for KAFKA
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

#Failing messages are move to Dead Letter Queue (DLQ)
spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
  enableDlq: true

---
# Docker profile
spring.config.activate.on-profile: docker

server.port: 8080
cityHost: "location:"
cityPort: 8080
weatherHost: "conditions:"
weatherPort: 8080

spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1